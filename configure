#!/bin/sh
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is Text Trix code.
#
# The Initial Developer of the Original Code is
# Text Flex.
# Portions created by the Initial Developer are Copyright (C) 2003-7
# the Initial Developer. All Rights Reserved.
#
# Contributor(s): David Young <dvd@textflex.com>
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

##################
# User-editable variables
##################

# Each plug-in gets its own rule.  New plug-ins should be added to this line, in case-
# sensitive format.
# Ex: add "PlugInWindowTemplate" for the template window, after including the 
# necessary files in the appropriate directory structure.
# Deprecated/removed plugins: NonPrintingChars
PLGS="Search ExtraReturnsRemover HTMLReplacer LetterPulse SongSheet"

TTX_VER=0.7.0rc1 # curr ver num; only used for default install loc

##################
# Overview Variables
##################

HELP="
Generates a customized Makefile to build Text Trix, the super tool 
chest for text.

Syntax:
      configure [--java=java-compiler-path] [--prefix=install-location] 
		[--help] 
(The command may need to be invoked with \"sh configure\", if
the file \"configure\" does not have executable permissions.)

Assumptions:
	The compilation takes place in a Bash shell within a Un*x-based
environment, even if the resulting executables will run in the Windows
envrionemnt.

Parameters:
	--help: Lends a hand by displaying yours truly.
	
	--prefix=install-location: the directory in which to install Text Trix.
	Defaults to /usr/local/texttrix-x.y.z, where x.y.z is set by the 
	variable, TTX_VER.
		
	--java=java-compiler-path: Specifies the path to javac, 
	jar, and other Java tools necessary for compilation.  
	Alternatively, the JAVA variable in pkg.sh can be hand-edited 
	to specify the path, which would override any command-line 
	specification.  On Linux, this path defaults to
	"/usr/java/default", the new link found in Java 6. 

Copyright:
	Copyright (c) 2003-7 Text Flex

Last updated:
	2006-12-18
"


echo "Greetings from your personal build configurator for the Text Trix "
echo "text tinkerer.  Let's start configuring your build environment."

##################
# Prep the Makefile
##################

###############
# User argument variables

PAR_JAVA="--java"
JAVA=""
READ_JAVA=0

PAR_PREFIX="--prefix"
PREFIX=""
READ_PREFIX=0

################
# Automatically detect the Cygwin environment

echo -n "Detecting environment..."
SYSTEM=`uname -s`
CYGWIN="false"
LINUX="false"
if [ `expr "$SYSTEM" : "CYGWIN"` -eq 6 ]
then
	CYGWIN="true"
elif [ `expr "$SYSTEM" : "Linux"` -eq 5 ]
then
	LINUX="true"
	JAVA=/usr/java/default/bin
fi
echo "found $SYSTEM"

##############
# Respond to user arguments

echo "Parsing user arguments..."
READ_PARAMETER=0
for arg in "$@"
do
	n=`expr index $arg "="`
	n=`expr $n - 1`
	
	# reads arguments
	if [ "x$arg" = "x--help" -o "x$arg" = "x-h" ] # help docs
	then
		if [ "`command -v more`" != '' ]
		then
			echo "$HELP" | more
		elif [ "`command -v less`" != "" ]
		then
			echo "$HELP" | less
		else
			echo "$HELP"
		fi
		exit 0
	elif [ `expr substr $arg 1 ${#PAR_JAVA}` \
			= $PAR_JAVA \
		-a ${#PAR_JAVA} -eq $n ] # Java path
	then
		READ_JAVA=1
		READ_PARAMETER=1
	elif [ `expr substr $arg 1 ${#PAR_PREFIX}` \
			= $PAR_PREFIX \
		-a ${#PAR_PREFIX} -eq $n ] # specify the install location
	then
		READ_PREFIX=1
		READ_PARAMETER=1
	fi
	
	
	n=`expr $n + 2`
	# checks whether to read the option following an argument
	if [ $READ_PARAMETER -eq 1 ]
	then
		if [ $READ_JAVA -eq 1 ]
		then
			JAVA=`expr substr $arg $n ${#arg}`
			READ_JAVA=0
			echo "...set to use $JAVA as the Java compiler path..."
		elif [ $READ_PREFIX -eq 1 ]
		then
			PREFIX=`expr substr $arg $n ${#arg}`
			echo "...set to use the $PREFIX prefix..."
			READ_PREFIX=0
		fi
		READ_PARAMETER=0
	fi
done
echo "...done"

# Appends a file separator to end of Java compiler path if not empty
# and no separator there
if [ `expr index "$JAVA" "/"` -ne ${#JAVA} ]
then
	JAVA="$JAVA"/
fi

# Source directories
# Note that currently requires the user to remain case-sensitive with the name
# of the base dir, even if Cygwin navigates w/o regard to case.
# Determine the base dir if not specified above.
# Any "/." used to invoke the script are removed for Cygwin compatibility.
if [ "x$BASE_DIR" = "x" ] # continue if BASE_DIR is empty string
then
	if [ `expr index "$0" "/"` -eq 1 ] # use script path if absolute
	then
		BASE_DIR="$0"
	else # assume that script path is relative to current dir
		script="${0#./}"
		BASE_DIR="$PWD/$script"
	fi
	BASE_DIR="${BASE_DIR%/texttrix/configure}" # assumes the script's name is configure
	BASE_DIR="${BASE_DIR%/.}"
fi
MAKEFILE="$PWD/Makefile" # name of resulting Makefile




#############
# Setup links
cd "$BASE_DIR"

#############
# Create $MAKEFILE
#############

echo -n "Removing old Makefile..."
rm -f $MAKEFILE
echo "done"

#############
# Header documentation

LICENSE="
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the \"License\"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an \"AS IS\" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is Text Trix code.
#
# The Initial Developer of the Original Code is
# Text Flex.
# Portions created by the Initial Developer are Copyright (C) 2003-5
# the Initial Developer. All Rights Reserved.
#
# Contributor(s): David Young <dvd@textflex.com>
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the \"GP\"), or
# the GNU Lesser General Public License Version 2.1 or later (the \"LGPL\"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

"

###########
# Setup macros



echo -n "Setting the Java compiler path to..."
if [ -n "$JAVA" ]
then
	echo "$JAVA"
else
	echo '$PATH'
fi


# Common and main Text Trix macros

PKG_DIR="com/textflex/texttrix"
PKG="com.textflex.texttrix"
srcFiles='SRC_FILES=$(wildcard $(BASE_DIR)/texttrix/$(PKG_DIR)/*.java)'
targetFiles='TARGET_FILES=$(patsubst $(BASE_DIR)/%.java,%.class,$(SRC_FILES))'

ttxBaseDir='$(BASE_DIR)/texttrix'
ttxBasePkgDir="$ttxBaseDir"'/$(PKG_DIR)'

#############
# Text Trix build rule
# Allows building by calling either TextTrix or texttrix

# main rule
ttxRule='TextTrix texttrix: TextTrix_setup $(TARGET_FILES)'

# setup rule
# Ensures proper placement of files
ttxSetupRule='TextTrix_setup: '
ttxSetupRule="$ttxSetupRule""\n\t"'mkdir -p texttrix/$(PKG_DIR)'
ttxSetupRule="$ttxSetupRule""\n\t"'mkdir -p texttrix/plugins'
ttxSetupRule="$ttxSetupRule""\n\tif [ ! "'$(BASE_DIR) = $$PWD ]; then cp -u '"$ttxBasePkgDir/*.txt texttrix/"'$(PKG_DIR); fi'
ttxSetupRule="$ttxSetupRule""\n\t"'mkdir -p texttrix/$(PKG_DIR)/images'
ttxSetupRule="$ttxSetupRule""\n\tif [ ! "'$(BASE_DIR) = $$PWD ]; then cp -u '"$ttxBasePkgDir/images/*.png"' texttrix/$(PKG_DIR)/images; fi'

# class rule
# Customized for building w/i Cygwin or Linux environments.
# "-source 1.3" is used to allow for maximal build versatility, though Text Trix does have
# classes only introduced since JVM 1.4
ttxClassRule='texttrix/$(PKG_DIR)/%.class: $(BASE_DIR)/texttrix/$(PKG_DIR)/%.java'
if [ $CYGWIN = true ]
then
	ttxClassRule="$ttxClassRule""\n\t"'$(JAVAC) -source 1.4 -sourcepath $(shell cygpath -wp $(BASE_DIR)/texttrix) -classpath $(shell cygpath -wp texttrix) $(shell cygpath -wp $?) -d $(shell cygpath -wp texttrix)'
else
	ttxClassRule="$ttxClassRule""\n\t"'$(JAVAC) -source 1.4 -sourcepath $(BASE_DIR)/texttrix -classpath texttrix $? -d texttrix'
fi

#########
# List of phony rules
phony='.PHONY: TextTrix texttrix TextTrix_setup'

clean="" # prep for building up the clean rule

#########
# Plug-in rules
plgSrcFiles=""
plgTargetFiles=""
plgRules="Plugs plugs: $PLGS""\n"
plgSetupRules=""
plgClassRules=""
for plg in $PLGS
do
	# plug-in directories have all-lower cases, while the vars have just the opposite
	plgDir=`echo "$plg" | tr "[:upper:]" "[:lower:]"`
	plgVar=`echo "$plg" | tr "[:lower:]" "[:upper:]"`
	
	# plug-in source files
	plgSrcFilesVar="$plgVar"_SRC_FILES
	plgSrcFiles="$plgSrcFiles""\n$plgSrcFilesVar"'=$(wildcard $(BASE_DIR)/plugins/'"$plgDir"'/$(PKG_DIR)/*.java)'
	
	# plug-in target files
	plgTargetFilesVar="$plgVar"_TARGET_FILES
	plgTargetFiles="$plgTargetFiles""\n$plgTargetFilesVar"'=$(patsubst $(BASE_DIR)/%.java,%.class,$('"$plgSrcFilesVar"'))'
	
	# parsing arguments to javac from directory information
	plgSrcpath='$(BASE_DIR)/texttrix:$(BASE_DIR)/plugins/'"$plgDir"
	plgClasspath=texttrix:plugins/"$plgDir"
	plgBaseDir='$(BASE_DIR)/plugins/'"$plgDir"
	plgBasePkgDir="$plgBaseDir"'/$(PKG_DIR)'
	
	# main rule, which includes dependency on texttrix to ensure PlugIn and 
	# related class updating
	plgRules="$plgRules""\n$plg"": texttrix $plg"'_setup $('"$plgTargetFilesVar"')'"\n"
	
	# setup rule
	plgSetupRules="$plgSetupRules""\n$plg"'_setup:'
	plgSetupRules="$plgSetupRules""\n\t"'mkdir -p plugins/'"$plgDir"'/$(PKG_DIR)'
	plgSetupRules="$plgSetupRules""\n\tif [ ! "'$(BASE_DIR) = $$PWD ]; then cp -u '"$plgBasePkgDir/*.html $plgBasePkgDir/*.png plugins/$plgDir/"'$(PKG_DIR); fi'"\n"
	
	# class rule
	plgClassRules="$plgClassRules""\nplugins/$plgDir"'/$(PKG_DIR)/%.class: $(BASE_DIR)/plugins/'"$plgDir"'/$(PKG_DIR)/%.java'
	if [ $CYGWIN = true ]
	then
		plgClassRules="$plgClassRules""\n\t"'$(JAVAC) -source 1.4 -sourcepath '"'"'$(shell cygpath -wp '"$plgSrcpath)'"' -classpath '"'"'$(shell cygpath -wp '"$plgClasspath)'"' $(shell cygpath -wp $?) -d $(shell cygpath -wp plugins/'"$plgDir"')'
	else
		plgClassRules="$plgClassRules""\n\t"'$(JAVAC) -source 1.4 -sourcepath '"$plgSrcpath"' -classpath '"$plgSrcpath"' $? -d plugins/'"$plgDir"
	fi
	# each plug-in must be packaged in a JAR file and moved to the "plugins" folder
	# within "texttrix"
	plgClassRules="$plgClassRules""\n\tcd plugins/$plgDir; "'$(JAR)'" -0cvf $plg.jar"' $(PKG_DIR)/*.class $(PKG_DIR)/*.html $(PKG_DIR)/*.png'
	plgClassRules="$plgClassRules""\n\tmv plugins/$plgDir/$plg.jar texttrix/plugins"
	plgClassRules="$plgClassRules""\n"
	
	# add to list of phony args
	phony="$phony $plg $plg"_setup
	
	# add targets to list of files to clean
	clean="$clean "'$('"$plgTargetFilesVar)"
done

# Setup installation directory
if [ x"$PREFIX" = x ]
then
	PREFIX='/usr/local/texttrix-$(TTX_VER)'
fi
echo "Setting TTX_VER to...$TTX_VER"
echo "Setting the installation path to...$PREFIX"


# Common macros collections
COMMON_VARS="TTX_VER=$TTX_VER
BASE_DIR=$BASE_DIR
PREFIX=$PREFIX
JAVAC="$JAVA"javac
JAR="$JAVA"jar
JAVADOC="$JAVA"javadoc
PKG_DIR=$PKG_DIR
PKG=$PKG
$srcFiles
$targetFiles
$plgSrcFiles
$plgTargetFiles
"

########
# API rule
# links to online Java documentation
LINK="-link http://java.sun.com/javase/6/docs/api"
api='api: $(TARGET_FILES)'"\n\t"'mkdir -p docs/api'
if [ $CYGWIN = true ]
then
	api="$api""\n\t"'$(JAVADOC) -d $(shell cygpath -wp docs/api) '$LINK' -classpath $(shell cygpath -wp texttrix) $(PKG)'
else
	api="$api""\n\t"'$(JAVADOC) -d docs/api '$LINK' -classpath texttrix $(PKG)'
fi


###########
# Installation rules

install='install: install_setup'
install="$install""\n\t"'cp -f $(BASE_DIR)/texttrix/$(PKG_DIR)/*.class $(PREFIX)/$(PKG_DIR)'
install="$install""\n\t"'cp -f $(BASE_DIR)/texttrix/$(PKG_DIR)/images/*.* $(PREFIX)/$(PKG_DIR)/images'
install="$install""\n\t"'cp -f $(BASE_DIR)/texttrix/plugins/*.jar $(PREFIX)/plugins'
install="$install""\n\t"'cp -f $(BASE_DIR)/texttrix/run.sh $(PREFIX)/run.sh'

installSetup='install_setup:'
installSetup="$installSetup""\n\t"'mkdir -p $(PREFIX)/$(PKG_DIR)/images'
installSetup="$installSetup""\n\t"'mkdir -p $(PREFIX)/plugins'

phony="$phony clean all install install_setup"

###########
# Clean-up rule

clean='clean: '"\n\t""rm -f $clean"' $(TARGET_FILES)'
clean="$clean""\n\t"'rm -f $(BASE_DIR)/texttrix/plugins/*.jar'




# Rules collection
RULES="all: texttrix $PLGS

$phony

$install

$installSetup

$ttxRule

$ttxSetupRule

$ttxClassRule

$plgRules
$plgSetupRules
$plgClassRules

$api

$clean
"

########
# Write the Makefile

echo -n "Creating Makefile..."
echo -e "$LICENSE" >> $MAKEFILE
echo -e "$COMMON_VARS" >> $MAKEFILE
echo -e "$RULES" >> $MAKEFILE
echo "done"
echo ""
echo "We're ready to create the Text Trix text tinkerer, compiled specially for
your program!  To start the build, type \"make [target]\", where target is
\"texttrix\" for the main writer, a plugin for each individual plugin, \"all\"
to build everything, or other rules specified in Makefile."
exit 0
